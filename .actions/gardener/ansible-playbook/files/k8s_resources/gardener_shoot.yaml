---
apiVersion: core.gardener.cloud/v1beta1
kind: Shoot
metadata:
  name: {{ gardener_shoot_name }}
  namespace: {{ gardener_namespace }}
  annotations:
    confirmation.gardener.cloud/deletion: {{ gardener_shoot_allow_delete | to_json | regex_replace('"', "'") | string | to_json }}
{% for annotation, value in gardener_shoot_annotations %}
    {{ annotation }}: {{ value }}
{% endfor %}
{% if gardener_shoot_audit_subaccount_id %}
    custom.shoot.sapcloud.io/subaccountId: {{ gardener_shoot_audit_subaccount_id }}
{% endif %}
spec:
  cloudProfileName:  {{ gardener_cloudprofile }}
  secretBindingName: {{ gardener_secret_name }}
  region: {{ gardener_aws_region }}
  seedName: {{ gardener_seed_name }}
  purpose: {{ gardener_shoot_purpose }}

  networking:
    type: {{ gardener_shoot_network_type }}
    pods: {{ gardener_shoot_vpc_pods_cidr }}
{% if gardener_shoot_vpc_nodes_cidr %}
    nodes: {{ gardener_shoot_vpc_nodes_cidr }}
{% else %}
    nodes: {{ gardener_shoot_vpc_cidr }}
{% endif %}
    services: {{ gardener_shoot_vpc_services_cidr }}

  maintenance:
    autoUpdate:
      kubernetesVersion: {{ gardener_auto_update_kubernetes_version | bool | lower }}
      machineImageVersion: {{ gardener_auto_update_machine_version | bool | lower }}
    timeWindow:
      begin: {{ gardener_maintenance_begin }}
      end: {{ gardener_maintenance_end }}

  addons:
    nginxIngress:
      enabled: {{ gardener_shoot_enable_nginx_ingress | bool | lower }}
      externalTrafficPolicy: {{ gardener_shoot_external_traffic_policy }}
{% if  gardener_shoot_lb_source_ranges %}
      loadBalancerSourceRanges: {{ gardener_shoot_lb_source_ranges }}
{% endif %}
    kubernetesDashboard:
      enabled: {{ gardener_shoot_enable_dashboard | bool | lower }}
      authenticationMode: token 

{% if gardener_shoot_cert_service_providerconfig or gardener_shoot_dns %}
  extensions:
{% if gardener_shoot_cert_service_providerconfig %}
    - type: shoot-cert-service
      providerConfig:
{% for providerconfig in gardener_shoot_cert_service_providerconfig %}
        apiVersion: {{ providerconfig.apiVersion }}
        kind: {{ providerconfig.kind }}
        issuers:
{% for issuer in providerconfig.issuers %}
          - email: {{ issuer.email }}
            name: {{ issuer.name }}
            server: {{ issuer.server }}        
{% endfor %}
{% endfor %}
{% endif %}
{% if gardener_shoot_dns %}
    - type: shoot-dns-service

  dns:
    domain: {{ gardener_shoot_dns }}
    providers: 
{% for provider in gardener_shoot_dns_providers %}
       - domains:
           include: 
{% for domname in provider.domainincludes %}
             - {{ domname }}
{% endfor %}			
         secretName: {{ provider.secretName }}
         type: {{ provider.type }}
         primary: {{ provider.primary }}
{% endfor %}
{% endif %}
{% endif %}

  hibernation:
    enabled: {{ gardener_enable_hibernation | bool | lower }}
{% if gardener_enable_hibernation %}
    schedules:
     - start: {{ gardener_hibernation_start }}
       end: {{ gardener_hibernation_end }}
       location: {{ gardener_hibernation_location }}
{% endif %}

  kubernetes:
    version: {{ gardener_k8s_version }}
    allowPrivilegedContainers: {{ gardener_shoot_allow_privileged_containers }}
    clusterAutoscaler:
      scaleDownUtilizationThreshold: 0.5
      scaleDownUnneededTime: 30m0s
      scaleDownDelayAfterAdd: 1h0m0s
      scaleDownDelayAfterFailure: 10m0s
      scaleDownDelayAfterDelete: 10s
      scanInterval: 10s
    kubeAPIServer:
      enableBasicAuthentication: false
      runtimeConfig:
        scheduling.k8s.io/v1alpha1: true
{% if gardener_shoot_oidc_config.clientid %}
      oidcConfig:
        clientID: {{ gardener_shoot_oidc_config.clientid }}
        groupsClaim: {{ gardener_shoot_oidc_config.groupsClaim }}
        issuerURL: {{ gardener_shoot_oidc_config.issuerURL }}
        usernameClaim: {{ gardener_shoot_oidc_config.usernameClaim }}
{% if gardener_shoot_oidc_caBundle %}
        caBundle: |
        {{ gardener_shoot_oidc_caBundle | indent(9, true) }}
{% endif %}
{% endif %}
{% if gardener_shoot_auditpolicy_name != "" %}
      auditConfig:
        auditPolicy:
          configMapRef:
            name: {{ gardener_shoot_auditpolicy_name }}
{% endif %}
    kubeControllerManager:
      nodeCIDRMaskSize: {{  gardener_shoot_nodeCIDRMaskSize }}
    kubeProxy:
      mode: {{ gardener_shoot_kubeproxy_mode }}

  networking:
    type: {{ gardener_shoot_network_type }}
    pods: {{ gardener_shoot_vpc_pods_cidr }}
{% if gardener_shoot_vpc_nodes_cidr %}
    nodes: {{ gardener_shoot_vpc_nodes_cidr }}
{% else %}
    nodes: {{ gardener_shoot_vpc_cidr }}
{% endif %}    
    services: {{ gardener_shoot_vpc_services_cidr  }}

{% if gardener_shoot_monitoring_email_receivers %}
  monitoring:
     alerting:
       emailReceivers:
{% for email in gardener_shoot_monitoring_email_receivers %}
       - {{ email }}
{% endfor %}
{% endif %}

  provider:
    type: {{ gardener_cloudprofile }}
    controlPlaneConfig:
      kind: ControlPlaneConfig
      apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1

    infrastructureConfig:
      kind: InfrastructureConfig
      apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1
      enableECRAccess: true 

      networks:
        vpc:
{% if gardener_shoot_vpc_id %}
          id: {{ gardener_shoot_vpc_id }}
{% else %}
          cidr: {{ gardener_shoot_vpc_cidr }}
{% endif %}
        zones:
{% for zone in gardener_shoot_vpc_zones %}
          - name: {{ zone.name }}
            internal: {{ zone.internal_cidr }}
            public: {{ zone.public_cidr }}
            workers: {{ zone.workers_cidr }}
{% endfor %}

    workers:
{% for worker in gardener_shoot_workers %}
    - name: {{ worker.name }}
      minimum: {{ worker.auto_scaler_min }}
      maximum: {{ worker.auto_scaler_max }}
      maxSurge: {{ worker.max_surge }}
      maxUnavailable: {{ worker.max_unavailable }}
      machine:
        type: {{ worker.machine_type }}
        image:
          name: {{ gardener_shoot_machine_image_name }}
          version: {{ gardener_shoot_machine_image_version }}
      volume:
        type: {{ worker.volume_type }}
        size: {{ worker.volume_size }}
      systemComponents:
        allow: true
{% if worker.labels %}
      labels:
{% for key, value in worker.labels.items() %}
        {{ key }}: {{ value }}
{% endfor %}
{% endif %}
{% if worker.annotations %}
      annotations:
{% for key, value in worker.annotations %}
        {{ key }}: {{ value }}
{% endfor %}
{% endif %}
{% if worker.taints %}
      taints:
{% for taint in worker.taints %}
      - key: {{ taint.key }}
        value: {{ taint.value }}
        effect: {{ taint.effect }}
{% endfor %}
{% endif %}
{% if worker.zones %}
      zones:
{% for zone in worker.zones %}
      - {{ zone }}
{% endfor %}
{% endif %}
{% endfor %}
